using System;
using System.Collections.Generic;
using System.Text;

namespace Chainer.SourceGen;

internal static class CodeText
{
    internal const string Namespace = "Chainer.ChainServices";

    internal const string RegisterChainsAttributeName = "RegisterChainsAttribute";

    internal const string RegisterChainsAttributeFilename = $"{RegisterChainsAttributeName}.g.cs";

    internal const string RegisterChainsAttribute =
        $$"""
          using System;

          namespace {{Namespace}}
          {
              [AttributeUsage(AttributeTargets.Class)]
              #pragma warning disable CS9113
              public sealed class {{RegisterChainsAttributeName}}<TContext>(params Type[] types) : Attribute where TContext : class, ICloneable, new()
              {
              }
              #pragma warning restore CS9113
          }
          """;

    internal const string ChainRegistrationPrefix = "RegisterChains<";

    internal const string ChainRegistrarFilename = "ChainerRegistrar.g.cs";

    internal static string GeneateChainServiceRegistrarCode(IEnumerable<string> usings, StringBuilder generatedCodeBuilder)
    {
        return $$"""
                 // <auto-generated/>

                 using System;
                 using System.Collections.Generic;
                 using Microsoft.Extensions.DependencyInjection;
                 using Microsoft.Extensions.DependencyInjection.Extensions;
                 using Microsoft.Extensions.Hosting;
                 {{string.Join("\r\n", usings)}}

                 namespace {{Namespace}}
                 {
                     public static class ChainerRegistrar
                     {
                         public static void RegisterChains(this IServiceCollection services)
                         {
                             {{generatedCodeBuilder}}
                         }
                     }
                 }
                 """;
    }

    internal static string ChainServiceImplemenation(IEnumerable<string> usings, string classNamespace, string className, string typeArguments)
    {
        return $$"""
                 using System.Collections.Generic;
                 {{string.Join("\r\n", usings)}}

                 namespace {{classNamespace}}
                 {
                     partial class {{className}}
                     {
                         protected override List<Type> ChainHandlers { get; } = new List<Type> { {{typeArguments}} };
                     }
                 }
                 """;
    }

    internal static string GetContextName(ReadOnlySpan<char> attributeContextName)
    {
        var start = attributeContextName.IndexOf('<');
        var end = attributeContextName.IndexOf('>');
        var length = end - start;
        var slice = attributeContextName.Slice(start + 1, length - 1);
        return slice.ToString();
    }

    internal static string GetChainHandlerFilename(string className)
    {
        return $"{className}-ChainHandlers.g.cs";
    }
}