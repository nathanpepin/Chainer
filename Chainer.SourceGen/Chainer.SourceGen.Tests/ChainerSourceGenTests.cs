using System;
using System.Collections.Generic;
using System.Linq;
using System.Reflection;
using Microsoft.CodeAnalysis;
using Microsoft.CodeAnalysis.CSharp;
using Xunit;

namespace Chainer.SourceGen.Tests;

public class ChainerSourceGenTests
{
    private const string Source =
        """
        using Chainer;
        
        namespace TestNamespace;

        [RegisterChains<FileContext>(typeof(FileHandlerUpperCase), typeof(FileHandlerRemoveComma), typeof(FileHandlerIsLegit))]
        public class FileChain(IServiceProvider services) : ChainService<FileContext>(services)
        {
            protected override List<Type> ChainHandlers { get; }
        }
        """;

    private const string Expected =
        """
        // <auto-generated/>

        using System;
        using System.Collections.Generic;

        namespace TestNamespace;

        partial class Vector3
        {
            public IEnumerable<string> Report()
            {
                yield return $"X:{this.X}";
                yield return $"Y:{this.Y}";
                yield return $"Z:{this.Z}";
            }
        }

        """;

    [Fact]
    public void GenerateReportMethod()
    {
        var generator = new ChainerSourceGenerator();

        var driver = CSharpGeneratorDriver.Create(generator);

       var references = new[]
        {
            MetadataReference.CreateFromFile(typeof(object).Assembly.Location),
            MetadataReference.CreateFromFile(typeof(ConsoleApp1.FileContext).Assembly.Location)
        };
        
        var compilation = CSharpCompilation.Create(nameof(ChainerSourceGenTests),
            new[] { CSharpSyntaxTree.ParseText(Source) },
            references);

        var runResult = driver.RunGenerators(compilation).GetRunResult();

        var generatedFileSyntax = runResult.GeneratedTrees.Single(t => t.FilePath.EndsWith("ChainerRegistrar.g.cs"));
        var generatedText = generatedFileSyntax.GetText().ToString();
        
        Assert.Equal(Expected, generatedText, ignoreLineEndingDifferences: true);
    }
}