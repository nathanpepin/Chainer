using System;
using System.Linq;
using Microsoft.CodeAnalysis;
using Microsoft.CodeAnalysis.CSharp;
using Xunit;

namespace Chainer.SourceGen.Tests;

public class ChainerSourceGenTests
{
    private const string Source =
        """
        using System;
        using Chainer.ChainServices;
        using Chainer.SourceGen.Sample.FileContextChain.Handlers;

        namespace Chainer.SourceGen.Sample.FileContextChain.Chains;

        [RegisterChains<FileContext>(typeof(FileHandlerUpperCase), typeof(FileHandlerRemoveComma), typeof(FileHandlerIsLegit))]
        public partial class FileChainTest(IServiceProvider services) : ChainService<FileContext>(services)
        {
        }
        """;

    private const string Expected =
        """
        // <auto-generated/>
        using System;
        using System.Collections.Generic;
        using Microsoft.Extensions.DependencyInjection;
        using Microsoft.Extensions.DependencyInjection.Extensions;
        using Microsoft.Extensions.Hosting;
        using TestNamespace;
        using Chainer;
        using Chainer.ChainServices;

        namespace Chainer.ChainServices
        {
            public static class ChainerRegistrar
            {
                public static void RegisterChains(this IServiceCollection services)
                {
                    services.TryAddScoped<FileChain>();
                    services.TryAddScoped<FileHandlerUpperCase>();
                    services.TryAddScoped<FileHandlerRemoveComma>();
                    services.TryAddScoped<FileHandlerIsLegit>();
                }
            }
        }
        """;

    [Fact]
    public void GenerateReportMethod()
    {
        var generator = new ChainerSourceGenerator();

        var driver = CSharpGeneratorDriver.Create(generator);

        var references = new[]
        {
            MetadataReference.CreateFromFile(typeof(object).Assembly.Location),
            MetadataReference.CreateFromFile(typeof(IServiceProvider).Assembly.Location),
            MetadataReference.CreateFromFile(typeof(IChainerMarker).Assembly.Location)
        };

        var compilation = CSharpCompilation.Create(nameof(ChainerSourceGenTests),
            new[] { CSharpSyntaxTree.ParseText(Source) },
            references,
            new CSharpCompilationOptions(OutputKind.DynamicallyLinkedLibrary));

        var runResult = driver.RunGenerators(compilation).GetRunResult();

        var generatedFileSyntax = runResult.GeneratedTrees.Single(t => t.FilePath.EndsWith("ChainerRegistrar.g.cs"));
        var generatedText = generatedFileSyntax.GetText().ToString();

        Assert.Equal(Expected, generatedText, ignoreLineEndingDifferences: true);
    }
}